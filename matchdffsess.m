% guide to matching ROIs from different sessions
% if you have problems contact sujink@bu.edu

%Download matlab
%Parallel processing toolbox
%Signal processing toolbox
%Install CAIMAN:
%Install NORMCORRE: https://github.com/flatironinstitute/NoRMCorre
%% run_pipeline on the first tseries (template tseries), this will be the tseries all subsequent
%  tseries are registered to
%STEP1 Open tseries stacks sequence with FIJI, see note 1 below
%STEP2 Image-> adjust -> size ->256 by 256 (downsample to 256 to save space)
%STEP3 Save stacks in separate folders (see step 4), this code assumes the
%format of PATH\FOV\DATEOFSESSION-TSeries
%STEP4 Run run_pipeline from CaImAn on the new folder
sessid = '20210123';
TSer = '5'; FOVnum = '1'; 
folderpath=['D:\Research\Scott\raw data\FOV'];
foldername =[folderpath FOVnum '\' sessid '-TSeries' TSer];
filetype = 'tif'; % type of files to be processed
        % Types currently supported .tif/.tiff, .h5/.hdf5, .raw, .avi, and .mat files
run_pipeline(sessid, TSer, FOVnum,foldername,filetype) % edited run_pipeline from bbs
% run_pipeline saves workspace to file ['workspace' sessid '-t' TSer '.mat']
%% for just one session
%STEP5 Run run_pipeline2 on a folder containing data from 820, this will
%extract the fluorescence data from the mask generated by CALMAN see note 2 below
session1data= [foldername '\workspace' sessid '-t' TSer '.mat']; % taken from step 4
session2data=[foldername '\']; % the tseries you are registering session
cd(session2data);
fileList = dir('*.tif'); % should be only tif in the directory 
% files='Full820.tif'; % alternatively just write the name of the file
% TSer2 = 12; files=[ 'TSeries-*' TSer2 '.tif'];
session2stack = fileList.name;
run_pipeline_2(session1data,session2data,session2stack)
%% for multiple sessions

sessid = '20210123';
TSer = '7'; FOVnum = '2'; 
folderpath=['D:\Research\Scott\raw data\FOV'];
foldername = [folderpath FOVnum '\' sessid '-TSeries' TSer];
filetype = 'tif'; % type of files to be processed

lendate = 2; % how many days of imaging you did
dates = strings(1:lendate);
dates(1)= '20210125'; %start date 
for jj=2:lendate
    dates(jj) = num2str(str2num(dates(1)) + 1); % if need be you can increase the increment by adding
end

% I split my data up into folders by FOV and then by \DATE-TSeries#\ 
% The TSeries number helps me determine which stack is earlier in time 
% within each \FOV\DATE-TSeries#\ are the stacks of 256x256xframes uncorrected
session1data= [foldername '\workspace' sessid '-t' TSer '.mat']; % taken from step 4
cd([folderpath FOVnum])
multitif=strings(1,2);
for ii=1:length(dates)  
    multisess = dir(join([folderpath FOVnum '\' dates(ii), '*\'],'')); % for each date list the directories that match within the FOV folder
    sessnums = size(multisess);
    multinames = strings(sessnums(1)+1,2);
    multinames(1,1) = 'filename'; multinames(1,2) = 'filepath';
    for kk = 1:length(multisess)
        multinames(kk) = multisess(kk).name;
        multinames(kk,2) = multisess(kk).folder;
    end
      for ll = 1:length(multinames)
          if ~isempty((regexp(multinames(ll),'.tif')))  % determines whether array is empty
             multitif(end+1,1:2) = multinames(ll,1:2);
          end
          tifcol = size(multitif);
          for pp = 1:tifcol(1)-1
            if strcmp(multitif(pp+1,2),foldername)==1% make sure you dont run the template
                multitif(pp+1,:) = [];
                disp(multitif) % for debugging
            end
          end
      
      end
  clear multinames multisess jj pp
end
clear ii 

% now go through list of .tif's that match the dates you imaged
% and motion corr/analyze each session against session1data
for ww = 1:length(multitif)-1 % first row is the header
    session2data=[multitif(ww+1,2)]; 
    cd(session2data);
    session2stack = multitif(ww+1);
    run_pipeline_2(session1data,session2data,session2stack)
    % clear the outputs of run_pipeline_2.m for the next one
    % run_pipeline_2.m saves the entire workspace in the format
    % save([file_name 'DATA' session1data(64:70) '.mat'],'-v7.3')
    clear M_green_final shifts template options_mc col_shift g820 ...
    output_filename fullname ISO_F mask1 mask2 mask3 trace F_dff 
    
end

%% for matching cell shapes, and looking at dF/F traces
% first import the necessary variables from run_pipeline2
% A_keep,N,M_green_final
% where the processed data (after run_pipeline_2) is stored
datapath= ['C:\Users\bbscott\Dropbox (BOSTON UNIVERSITY)\Kinematic_Data\Bruker\processed\mouse'];
% where you want to save your output
spath = 'C:\Users\bbscott\Dropbox (BOSTON UNIVERSITY)\Kinematic_Data\Bruker\processed\mouse\FOV2\sum-cells';

filetype = 'mat'; % type of files to be processed
files = dir(fullfile(datapath,['TSeries*.',filetype])); % all of the processed files from run_pipeline_2
% example of a raw data file that is the same FOV as the processed data
% this is to get microns_per_pixel from the metadata
sessid = '20210123'; TSer = '7'; FOVnum = '2'; 
% rawpath = ['C:\Users\bbscott\Dropbox (BOSTON UNIVERSITY)\Kinematic_Data\Bruker\raw data\' ...
%     sessid]; 
% rawpath = [];
alldff=[];
masterdff = {};
for tt = 1:length(files)
    % now you want to open each of these files one at a time 
    filename = files(tt).name;
    alldff=summary_all_cells(datapath,tt,filename);
    % this runs cell_finder which masks each mask to the cell shape specified
    % then it will extract the cell DF/F of masks that look like cells
    % and return all of this in a cell array called alldff
    
    % now take alldff and rename it with the name of the tseries date and
    % tseries number
    filename = [files(tt).name(10:16) 't' files(tt).name(23:25)];
    masterdff.(['s' filename])=alldff;
    % you will have an alldff for each processed file, combine all of these
    % after you create the masterdff file you will have
    % date, path to raw data, corresponding cell number and mask, and trace
    if tt==length(files)
        cd(spath)
        save('masterdff','masterdff','files','-v7.3');
    end
    alldff=[];
end

%% Notes

%Note 1, related to STEP1:
%you should be able to run this pipeline on a 256 by 256 movie up to 30K frames, but start with 10K
%for debugging.  If you go over 30K frames an error occurs running normcorre:
%"Error using normcorre_batch_even (line 111)
%Movie appears to have only one frame. Use the function normcorre instead"
%seems to be a problem with mfinfo when file gets too big. probably best to
%run on 30000K frames. this is 10000 seconds or ~16min 40 sec, which seems
%fine.

%Note 2, related to STEP5:
% to get the mask for the nth cell you need to do the following:
%mask=reshape(A_keep(:,n),256,256);


% function [matched_ROIs,nonmatched_1,nonmatched_2,A2,R,A_union] = register_ROIs(A1,A2,options,template1,template2,options_mc)